class ChatError extends Error{constructor(e){super(e),this.message=e,this.name="ChatError"}}class SendError extends Error{constructor(e){super(e),this.message=e,this.name="SendError"}}class Data extends Array{addValue(e,t){return(this[e]=t)&&this}}class Selection extends Array{}class Chat{constructor(e=0,t=null){if(this.chat=Chat,this.current=this,this.selectedMessages=new Selection,this.peer_id=0,this.messagesCache=new class extends Data{addValue(e,t){if(this.getLength()>=100)for(let e in this)if(delete this[e],this.getLength()<100)break;this[e]=t}getLength(){for(let e in this){let t=0;return"function"!=typeof this[e]&&t++,t}}},this.createdDates=new Data,this.chatObject=null,messages.cache[e])throw new ChatError("Chat already has been initialized");if(!e)throw new ChatError("Peer id must be not 0");return this.peer_id=e,this.peer_id<0&&(this.permissions={},this.toggleUser=function(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","toggle_my_state"),n.append("peer_id",e.peer_id),ui.Request({url:"/messages",data:n,method:"POST",success:function(e){return(e=JSON.parse(e)).error?r(new ChatError("State changing error")):t(e.result)}})})},this.setUserLevel=function(e,t){let r=this;return new Promise(function(n,s){let i=new FormData;return i.append("action","set_user_level"),i.append("peer_id",r.peer_id),i.append("user_id",e),i.append("new_level",t),ui.Request({url:"/messages",data:i,method:"POST",success:function(e){return(e=JSON.parse(e)).error?s(new ChatError("Setting user level failed by error from server")):n(!0)}})})},this.toggleWriteAccess=function(e){let t=this;return new Promise(function(r,n){let s=new FormData;return s.append("action","toggle_write_access"),s.append("peer_id",t.peer_id),s.append("user_id",e),ui.Request({url:"/messages",data:s,method:"POST",success:function(e){return(e=JSON.parse(e)).error?n(new ChatError("Toggle write access failed by error from server")):r(e.state||0)}})})},this.removeUser=function(e){let t=this;return new Promise(function(r,n){let s=new FormData;return s.append("action","remove_user"),s.append("peer_id",t.peer_id),s.append("user_id",e),ui.Request({url:"/messages",data:s,method:"POST",success:function(e){return(e=JSON.parse(e)).error?n(new ChatError("Kick failed by error from server")):r(!0)}})})},this.getMembers=function(){let e=this;return new Promise(function(t,r){if(e.cachedMembers)return t(e.cachedMembers);let n=new FormData;return n.append("action","get_members"),n.append("peer_id",e.peer_id),ui.Request({data:n,method:"POST",url:"/messages",success:function(n){return(n=JSON.parse(n)).error?r(new ChatError("Messages fetching error")):t(e.cachedMembers=n)}})})},this.setPermissions=function(e,t){let r=this;return new Promise(function(n,s){let i=new FormData;return i.append("action","update_chat_permissions"),i.append("group_name",e),i.append("value",Number(t)),i.append("peer_id",r.peer_id),ui.Request({data:i,url:"/messages",method:"POST",success:function(e){return(e=JSON.parse(e)).error?s(new ChatError("Permissions changing error")):n(!0)}})})},this.addMembers=function(e=[]){let t=this;return new Promise(function(r,n){let s=new FormData;return s.append("action","add_user"),s.append("user_ids",e.join(",")),s.append("peer_id",t.peer_id),ui.Request({data:s,url:"/messages",method:"POST",success:function(e){if((e=JSON.parse(e)).response)return r(!0);if(e.error){let t=new ChatError("Invitation error.");return t.errorCode=e.error,n(t)}}})})},this.getCurrentPermissionsLevel=function(){let e=this;return new Promise(function(t,r){if(e.currentPermissionsLevel)return t(e.currentPermissionsLevel);let n=new FormData;return n.append("action","get_my_permissions_level"),n.append("peer_id",e.peer_id),ui.Request({data:n,url:"/flex",method:"POST",success:function(n){return(n=JSON.parse(n)).unauth?settings.raLogin():n.error?r(new ChatError("Chat permissions level fetch error")):t(e.currentPermissionsLevel=n.level)}})})},this.getPermissions=function(){let e=this;return new Promise(function(t,r){if(e.chatPermissions)return t(e.chatPermissions);let n=new FormData;return n.append("action","get_chat_permissions"),n.append("peer_id",e.peer_id),ui.Request({data:n,url:"/flex",method:"POST",success:function(n){return(n=JSON.parse(n)).unauth?settings.raLogin():n.error?r(new ChatError("Chat permissions fetch error")):t(e.chatPermissions=n)}})})},this.getJoinLink=function(){let e=this;return new Promise(function(t,r){if(e.currentLink)return t(e.currentLink);let n=new FormData;return n.append("action","get_chat_link"),n.append("peer_id",e.peer_id),ui.Request({data:n,method:"POST",url:"/messages",success:function(n){return(n=JSON.parse(n)).error?r(new TypeError("Unable to fetch the link")):n.unauth?settings.reLogin():(e.currentLink=n.response,t(n.response))}})})},this.updateJoinLink=function(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","update_chat_link"),n.append("peer_id",e.peer_id),ui.Request({data:n,method:"POST",url:"/messages",success:function(n){return(n=JSON.parse(n)).error?r(new TypeError("Unable to fetch the link")):n.unauth?settings.reLogin():(e.currentLink=n.response,t(n.response))}})})},this.updatePhoto=function(e=null){let t=this;return new Promise(function(r,n){let s=new FormData;return null!==e?(s.append("action","update_chat_photo"),s.append("photo",e)):s.append("action","delete_chat_photo"),s.append("peer_id",t.peer_id),ui.Request({data:s,url:"/messages",method:"POST",success:function(e){return(e=JSON.parse(e)).error?n(new ChatError("Unable to edit chat photo")):r(!0)}})})},this.setTitle=function(e=""){let t=this;return new Promise(function(r,n){let s=new FormData;return s.append("action","set_chat_title"),s.append("new_title",e.toString()),s.append("peer_id",t.peer_id),ui.Request({data:s,url:"/messages",method:"POST",success:function(e){return(e=JSON.parse(e)).error?n(new ChatError("Unable to edit chat photo")):r(!0)}})})}),this.chatObject=t,messages.cache[e]=this}clearChatCache(){return this.chatObject=null,this.permissions=null,this.chatPermissions=null,messages.cache[this.peer_id]=null,this}read(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","read_chat"),n.append("peer_id",e.peer_id),ui.Request({url:"/messages",method:"POST",data:n})})}clearHistory(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","clear"),n.append("chat_id",e.peer_id),ui.Request({url:"/messages",method:"POST",data:n,success:function(n){return String(n).isEmpty()?r(new ChatError("Chat clearing fail.")):(n=JSON.parse(n)).unauth?settings.reLogin():n instanceof Array?t(e.clearChatCache()):r(new ChatError("Chat clearing fail."))}})})}saveMessage(e,t="",r="",n=""){let s=this;return new Promise(function(i,a){if(s.getInfo().then(function(e){if(e.permissions){if(e.permissions.is_kicked)return a(new SendError("You kicked from this chat"));if(e.permissions.is_muted)return a(new SendError("You muted in this chat"))}}),String(t).isEmpty()&&String(r).isEmpty()&&String(n).isEmpty())return a(new SendError("Text or attachments or fwd must not be empty"));let o=new FormData;return o.append("action","save_message"),o.append("peer_id",s.peer_id.toString()),o.append("text",t.toString()),o.append("attachments",r.toString()),o.append("fwd",n.toString()),o.append("message_id",Number(e)),ui.Request({url:"/messages",data:o,xhrFields:{withCredentials:!0},method:"POST",success:function(e){if(String(e).isEmpty())return a(new SendError("Response is empty"));try{return(e=JSON.parse(e)).unauth?settings.reLogin():e.error?a(new SendError("Unable to send message")):i(e.id)}catch(e){return a(new SendError("Received an invalid response"))}}})})}toggleNotifications(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","toggle_notifications"),n.append("peer_id",e.peer_id.toString()),n.append("new_value",Number(!e.chatObject.metadata.notifications).toString()),ui.Request({url:"/messages",data:n,method:"POST",success:function(e){if(String(e).isEmpty())return r(new SendError("Response is empty"));try{return(e=JSON.parse(e)).unauth?settings.reLogin():e.error?r(new SendError("Unable to change notes")):t(e.success)}catch(e){return r(new SendError("Received an invalid response"))}}})})}togglePinnedMessages(){let e=this;return new Promise(function(t,r){let n=new FormData;return n.append("action","toggle_pinned_messages"),n.append("peer_id",e.peer_id.toString()),n.append("new_value",Number(!e.chatObject.metadata.show_pinned_messages).toString()),ui.Request({url:"/messages",data:n,method:"POST",success:function(e){if(String(e).isEmpty())return r(new SendError("Response is empty"));try{return(e=JSON.parse(e)).unauth?settings.reLogin():e.error?r(new SendError("Unable to change notes")):t(e.success)}catch(e){return r(new SendError("Received an invalid response"))}}})})}sendMessage(e="",t="",r=""){let n=this;return new Promise(function(s,i){if(n.getInfo().then(function(e){if(e.permissions){if(e.permissions.is_kicked)return i(new SendError("You kicked from this chat"));if(e.permissions.is_muted)return i(new SendError("You muted in this chat"))}}),String(e).isEmpty()&&String(t).isEmpty()&&String(r).isEmpty())return i(new SendError("Text or attachments or fwd must not be empty"));let a=new FormData;return a.append("action","send_message"),a.append("peer_id",n.peer_id.toString()),a.append("text",e.toString()),a.append("attachments",t.toString()),a.append("fwd",r.toString()),ui.Request({url:"/messages",data:a,xhrFields:{withCredentials:!0},method:"POST",success:function(e){if(String(e).isEmpty())return i(new SendError("Response is empty"));try{return(e=JSON.parse(e)).unauth?settings.reLogin():e.error?i(new SendError("Unable to send message")):s(e.id)}catch(e){return i(new SendError("Received an invalid response"))}}})})}getMessages(e=1){const t=this;return new Promise(function(r,n){if(e<1)return n(new ChatError("Page must be more then 1"));if(t.cacheLength()>0&&1===e){let e=[];for(let r in t.messagesCache){if(isNaN(r))continue;let n=t.messagesCache[r];"object"==typeof n&&e.push(n)}return t.read(),r({list:e,pinned:t.pinnedMessages})}let s=new FormData;return s.append("action","get_messages"),s.append("peer_id",t.peer_id),s.append("page",Number(e)||1),ui.Request({url:"/messages",method:"POST",data:s,success:function(e){return(e=JSON.parse(e)).unauth?settings.reLogin():e.error?n(new ChatError("Messages fetch error")):(e.list.forEach(function(e){return t.messagesCache.addValue(e.id,e)}),t.pinnedMessages=e.pinned,r(e))}})})}addToCache(e){}removeFromCache(e){}cacheLength(){let e=0;for(let t in this.messagesCache)isNaN(t)||e++;return e}clearCache(){return(this.messagesCache={})&&this}getInfo(){const e=this;return new Promise(function(t,r){if(e.chatObject){if(!e.chatObject.metadata.permissions)return t(e.chatObject);if(!e.chatObject.metadata.permissions.is_leaved&&!e.chatObject.metadata.is_kicked)return t(e.chatObject)}let n=new FormData;return n.append("action","get_chat_by_peer"),n.append("peer_id",e.peer_id),ui.Request({url:"/flex",data:n,method:"POST",xhrFields:{withCredentials:!0},success:function(r){return(r=JSON.parse(r)).unauth?settings.raLogin():r.error?t(new ChatError("Unable to fetch chat info")):(r.metadata.permissions&&(r.metadata.permissions.is_leaved||r.metadata.permissions.is_kicked)||(e.chatObject=r),t(r))}})})}}class URLParser{constructor(e=window.location.href){return this.url=window.location.href,this.url=e}parse(){let e=this.url.split("/"),t=e[e.length-1].split("?")[1];if(!t)return{};let r=t.split("&");if(!r)return{};let n={};return r.forEach(function(e){let t=e.split("="),r=t[0],s=t[1];if(r&&s){isNaN(Number(s))||(s=Number(s)),"true"===s&&(s=!0),NaN==s&&(s=!1),"null"===s&&(s=null);try{s=JSON.parse(s)}catch(e){}return n[r]=s}return null}),n}}